import { NetMDFactoryInterface, NetMDInterface } from 'netmd-js';
import { CORE_MACROS } from './assembler/core-macros';
import { ExploitStateManager } from './exploit-state';
import { getFromVersionStore, getFromVersionStoreOrNull } from './utils';

export class CompatibilityError extends Error {
    constructor(m: string) {
        super(m);
        Object.setPrototypeOf(this, CompatibilityError.prototype);
    }
}

export class PatchError extends Error {
    constructor(m: string) {
        super(m);
        Object.setPrototypeOf(this, PatchError.prototype);
    }
}

export type VersionPropertyStore = {
    [key: string]: { [key: string]: any };
};

export type ExploitConstructor<T extends Exploit> = (new (statemanager: ExploitStateManager) => T) & { _name: string };

export abstract class Exploit {
    protected iface: NetMDInterface;
    protected factoryIface: NetMDFactoryInterface;
    constructor(protected stateManager: ExploitStateManager) {
        this.iface = stateManager.iface;
        this.factoryIface = stateManager.factoryIface;
    }

    async init() {}

    protected abstract getPropertyStore(): VersionPropertyStore;

    protected getProperty(name: string): any {
        const store = this.getPropertyStore();
        return getFromVersionStore(store, this.stateManager.device.versionCode, name);
    }

    protected getFirmwareProperty(name: string): any{
        return getFromVersionStore(
            CORE_MACROS.fw_compat_bridge.properties,
            this.stateManager.device.versionCode,
            name
        );
    }

    protected getPropertyOrNull(name: string): any {
        const store = this.getPropertyStore();
        return getFromVersionStoreOrNull(store, this.stateManager.device.versionCode, name);
    }

    protected getProperties(...names: string[]): any[] {
        return names.map(this.getProperty.bind(this));
    }

    protected assemble(code: string, variables?: { [key: string]: any }): Uint8Array {
        const store = this.getPropertyStore();
        
        let assemblerUsed;
        if(code.trim().startsWith(";!THUMB")){
            assemblerUsed = this.stateManager.thumbAssembler;
        }else{
            assemblerUsed = this.stateManager.armAssembler;
        }
        const processedCode = assemblerUsed.processCode(
            code,
            store,
            this.stateManager.device.versionCode,
            variables || {},
            this.getPropertyOrNull("_macros") || {}
        );
        try {
            return assemblerUsed.assemble(
                assemblerUsed.removeComments(processedCode)
            );
        } catch (error) {
            console.log('Error during the assembly of');
            console.log(processedCode);
            throw error;
        }
    }

    assembleProperty(name: string, variables?: { [key: string]: any }): Uint8Array {
        return this.assemble(this.getProperty(name), variables);
    }
}
