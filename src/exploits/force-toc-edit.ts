import { display, DisplayMode } from 'netmd-js';
import { sleep } from 'netmd-js/dist/utils';
import { Exploit, VersionPropertyStore } from '../exploit';
import { USBCodeExecution } from './usb-code-execution';

export class ForceTOCEdit extends Exploit {
    public static _name = 'ForceTOCEdit';

    protected getPropertyStore(): VersionPropertyStore {
        return {
            editInFirmware: {
                // Something to look out for - this address is not the beginning
                // of a function. We have to jump mid-function to avoid flusing
                // the first TOC sector from the system SRAM to the DRAM cache.
                'B1.600': 0x00016b6f,
                'B1.400': 0x00016277,
                'B1.300': 0x0001535f,
            },
            raiseLowerHead: {
                'B1.600': 0x00052e01,
                'B1.400': 0x00051d9c,
                'B1.300': 0x0004e9a1,
            },
            triggerCode: {
                '*': `
                    mov r0, #1
                    @bxar r1, $editInFirmware
                `,
            },
            raiseLowerCode: {
                '*': `
                    mov r0, #%lowerOrRaise
                    @bxar r1, $raiseLowerHead
                `,
            },
        };
    }

    async forceTOCEdit() {
        await display(this.factoryIface, 'TOCWRT', true);
        const codeExecution = await this.stateManager.require(USBCodeExecution);
        await codeExecution.execute(
            this.assembleProperty('raiseLowerCode', {
                lowerOrRaise: 0x02,
            })
        );
        await sleep(1000);
        await codeExecution.execute(this.assembleProperty('triggerCode'));
        await sleep(50000);
        await codeExecution.execute(
            this.assembleProperty('raiseLowerCode', {
                lowerOrRaise: 0x01,
            })
        );
        await this.factoryIface.setDisplayMode(DisplayMode.DEFAULT);
    }
}
