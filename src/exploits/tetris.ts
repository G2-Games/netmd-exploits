import { MemoryType, writeOfAnyLength } from 'netmd-js';
import { Exploit } from '../exploit';
import { formatUIntQuery } from '../utils';
import { USBCodeExecution } from './usb-code-execution';

export class Tetris extends Exploit {
    public static _name = 'Tetris';

    protected getPropertyStore() {
        return {
            tetrisCode: {
                // The Tetris code has been written by Sir68k
                'S1.600': formatUIntQuery(
                    '70402de90040a0e360509fe50400a0e10fe0a0e115ff2fe1014084e2080054e3f9ffff1a0410a0e144009fe544309fe50fe0a0e113ff2fe13c409fe5030000ea4d0000eb0a00a0e30fe0a0e114ff2fe10000a0e34f0000eb000050e3f7ffff0a3f0000ebbc0000eb7040bde81eff2fe1c1c50700b85c0002bdec030001c2070004309fe5680093e51eff2fe10010000204309fe57f00d3e51eff2fe1000800022136a0e3000093e5ff0000e21eff2fe104e02de53cc09fe5903ccce0c03fa0e1cc3063e003c183e00c0040e0050060e224c09fe5041081e2831181e00130dce701e0a0e31e30c3e1123083e10130cce704e09de41eff2fe167666666c45c0002060051e30030a0930130a083180050e3013083c3000053e30100000a0100a0e31eff2fe130309fe59023c3e0c02fa0e1c32062e024309fe5823183e0013083e00430d3e5022182e0020040e0050060e25300a0e1010000e21eff2fe167666666c45c00020a10a0e304009fe504309fe513ff2fe1805c0002bdec03002c10a0e304009fe504309fe513ff2fe1c45c0002bdec03001eff2fe170402de90050a0e1baffffebfe4000e2200054e30700000a4c309fe50560d3e7b0ffffeb040056e10400000a0000a0e37040bde81eff2fe1b2ffffebf5ffffea28209fe5053192e7033040e0030055e30510a0030f10a013010053e1050182870100a083f0ffff9af0ffffea8c5c0002f05c0002f04f2de90cd04de230b0dde5007051e22200000a0080a0e103a0a0e10060a0e3073062e204308de5170000ea013084e2015085e2030057e10f00000a0340a0e1ff3004e2a330d8e701c004e20cc186e007c06ce2533ca0e1010013e3f2ffff0a000055e3f0ffffba0b20a0e10910a0e10500a0e18affffebebffffea013086e2040056e10500000a0360a0e10a50a0e10040a0e304309de5069043e0e7ffffea0cd08de2f04fbde81eff2fe1180053e32400000af0472de90060a0e10150a0e10370a0e1000051e3079062120080a0131a00001a0000a0e3110000ea013084e2030055e11000000a0340a0e1ff3004e2a330d6e7012004e2022188e0072062e25322a0e1010012e3f3ffff0a0910a0e1070084e076ffffeb000050e3eeffff0a0100a0e3f047bde81eff2fe1013088e2019049e2040058e1e5ffff0a0380a0e10040a0e3e8ffffea0100a0e31eff2fe1f04f2de914d04de245ffffebf8339fe5901383e0031040e0a13083e02331a0e1833163e0033040e0e0239fe50330f2e70c30cde50080a0e30d80cde50860d2e50130a0e300308de50030e0e30220a0e30610a0e10c008de294ffffeb6fffffeb00808de50030e0e30220a0e30610a0e10c008de28dffffeb0090e0e30270a0e33e0000ea0810a0e384039fe584539fe50fe0a0e115ff2fe160ffffeb6400a0e374439fe50fe0a0e114ff2fe10810a0e368039fe50fe0a0e115ff2fe157ffffebc800a0e30fe0a0e114ff2fe11cffffeb14d08de2f04fbde81eff2fe100b0a0e3010000ea0490a0e101b0a0e30100a0e351ffffeb000050e34d00001a0200a0e34dffffeb000050e35500001a0000a0e349ffffeb000050e35d00001a18a0a0e30050a0e30540a0e10410a0e10a00a0e11bffffeb105485e1014084e2070054e3f8ffff1a01a04ae27f0055e38000000a01007ae3f1ffff1a00005be39a00001a0300a0e334ffffeb000050e30080a0130400a003a0329f050fe0a00113ff2f01e7feffeb083040e0190053e3d2ffff9a014089e2044ca0e1444ca0e10080a0e10430a0e10720a0e10610a0e10c008de269ffffeb000050e3c9ffff0a01b0a0e300b08de50930a0e10720a0e10610a0e10c008de235ffffeb2c329fe5982383e0032048e0323b83e02331a0e1833163e0033048e014229fe50330f2e70c30cde50030a0e30d30cde50860d2e50030e0e30220a0e30610a0e10c008de24effffeb000050e396ffff1a0090e0e30270a0e3adffffea014047e2044ca0e1444ca0e10930a0e10420a0e10610a0e10c008de241ffffeb000050e30470a00101b0a0e3a5ffffea014087e2044ca0e1444ca0e10930a0e10420a0e10610a0e10c008de235ffffeb000050e30470a00101b0a0e39dffffea00e0a0e3b8e0cde10e0056e101504612ff50051208008d122200000a0e2045e0ff3002e2a34080e0a330d0e701c002e20cc1a0e10010a0e307c06ce2ff2001e210a08de2a2208ae0042052e501a001e20aa18ee007a06ae2522aa0e1012002e201a04ce0123a83e1ff3003e2011081e2060051e1f0ffff1a0030c4e501e08ee206005ee1e4ffff1a0930a0e10720a0e10610a0e10bffffeb000050e30300000a01b0a0e377ffffea08008de2f5ffffeab830dde1bc30cde1f8ffffea01a04ae201007ae31300000a01b08ae20050a0e30540a0e10410a0e10a00a0e18bfeffeb105485e1014084e2070054e3f8ffff1a0040a0e35524a0e1012002e20410a0e10b00a0e16dfeffeb014084e2070054e3f7ffff1ae8ffffea0040a0e30020a0e30410a0e10200a0e164feffeb014084e2070054e3f8ffff1a0130a0e300308de50930a0e10720a0e10610a0e10c008de2b1feffeb8cfeffeb0030a0e300308de50930a0e10720a0e10610a0e10c008de2a9feffeb54ffffea25499224905c0002a05c0002bdec030001c20700ac5c00020f2cc00020000102030400006c7a746e0fcc4e6cc68e2e000402030303030300c0002047414d452000000000c000204f5645522000000000c000546574726973000000000f2cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                ),
            },
            loadingAddress: {
                '*': 0x02005500,
            },
            bootstrap: {
                '*': `
                    ldr r0, loadingAddress
                    bx r0
                    
                    loadingAddress: .word $loadingAddress
                `,
            },
        };
    }

    public async playTetris() {
        await writeOfAnyLength(
            this.stateManager.factoryIface,
            this.getProperty('loadingAddress'),
            this.getProperty('tetrisCode'),
            MemoryType.MAPPED
        );
        await (await this.stateManager.require(USBCodeExecution)).execute(this.assembleProperty('bootstrap'));
    }
}
