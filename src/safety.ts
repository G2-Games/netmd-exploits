import { patch, readPatch } from "netmd-js";
import { ExploitStateManager } from "./exploit-state";
import { formatUIntQuery, getFromVersionStoreOrNull } from "./utils";


// This patch fixes a critical bug in the Sony firmware
// This bug causes the unit to block its ability to write
// tracks via NetMD by corrupting a part of the "NetMD" block
// in the EEPROM when the device resets with
// 'DataAbort', 'SupervisorCall' or 'PrefetchAbort'
//
// Author: 森田 (Morita), Sony Corporation

const HANDLE_FAULT_EEPROM_CORRUPTION = {
    address: {
        "S1.000,S1.600,S1.500,S1.400": 0x000000C4,
    },
    data: {
        "S*": formatUIntQuery("dcff ffea"),
    }
};


// These addresses are for hard-patched developer units only
const DEV_ADDRESSES = [ 0xe6c0, 0xe69c ];


export async function loadSafetyPatches(exploitStateManager: ExploitStateManager){
    
    // Try to locate the patch in the player's patch memory.
    const address = getFromVersionStoreOrNull(HANDLE_FAULT_EEPROM_CORRUPTION, exploitStateManager.device.versionCode, "address");
    const value = getFromVersionStoreOrNull(HANDLE_FAULT_EEPROM_CORRUPTION, exploitStateManager.device.versionCode, "data");
    if(!address){
        console.log(`[StateManager / Safety]: Cannot lookup HFEC for version ${exploitStateManager.device.versionCode}.`);
        return;
    }
    
    let hfecLoaded = false;

    for(let i = 0; i<exploitStateManager.getMaxPatchesAmount(); i++){
        const patch = await readPatch(exploitStateManager.factoryIface, i);

        if(patch.address === address && patch.data.every((v, i) => v === value[i])){
            console.log(`[StateManager / Safety] Found HFEC at patch slot #${i}`);

            exploitStateManager.markPatchAsPermanent(i);
            hfecLoaded = true;
        }
        if(DEV_ADDRESSES.includes(patch.address)){
            console.log(`[StateManager / Safety] Found a developer patch at patch slot #${i}`);
            exploitStateManager.markPatchAsPermanent(i);
        }
        
    }
    if(hfecLoaded) return;
    
    console.log(`[StateManager / Safety] HFEC couldn't be found on your unit! Soft-patching.`);
    await patch(
        exploitStateManager.factoryIface,
        address,
        value,
        exploitStateManager.getIncrementalPatchNumber(),
        exploitStateManager.getMaxPatchesAmount()
    );
    console.log(`[StateManager / Safety] HFEC loaded.`);
}
