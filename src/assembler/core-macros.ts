import { Macro } from './assembler';

export const CORE_MACROS: { [key: string]: Macro } = {
    blxar: {
        code: `
            add %macro_argument_0, pc, #0xc
            mov lr, %macro_argument_0
            ldr %macro_argument_0, [ pc ]
            bx %macro_argument_0
            .word %macro_argument_1
        `,
        properties: {},
    },
    blxa: {
        code: `
            @blxar r7, %macro_argument_0
        `,
        properties: {},
    },
    bxar: {
        code: `
            ldr %macro_argument_0, [ pc ]
            bx %macro_argument_0
            .word %macro_argument_1
        `,
        properties: {},
    },
    bxa: {
        code: `
            @bxar r7, %macro_argument_0
        `,
        properties: {},
    },
    fw_compat_bridge: {
        code: ``,
        properties: {
            tron_ter_task: {
                'B1.600': 0x0007c5c1,
                'B1.300': 0x00077c19,
            },
            tron_set_flg: {
                'B1.600': 0x0007c095,
                'B1.300': 0x000776ed,
            },
            tron_clr_flg: {
                'B1.600': 0x0007c2c5,
                'B1.300': 0x0007791d
            },
            usb_do_response: {
                'B1.600': 0x00077a3d,
                'B1.300': 0x000732c1
            },
            g_usb_buff: {
                'B1.600': 0x02001170,
                'B1.300': 0x0200102c,
            },
            g_DiscStateStruct: {
                'B1.600': 0x020001e8,
                'B1.300': 0x020001d8,
            },
        },
    },
    patch: {
        code: `
            ; r5:uint8_t  <- patch number
            ; r3:uint32_t <- address
            ; r4:uint32_t <- value
            
            ; Write 5, 12 to main control
            ldr r0, _patch_macro_control
            mov r1, #5
            strb r1, [ r0 ]
            mov r1, #12
            strb r1, [ r0 ]
            
            ldr r0, _patch_macro_base
            lsl r5, r5, #4
            add r0, r0, r5
            
            ; AND 0xFE with patch control
            ldr r1, [ r0 ]
            and r1, r1, #0xFE
            str r1, [ r0 ]
            
            ; AND 0xFD with patch control
            ldr r1, [ r0 ]
            and r1, r1, #0xFD
            str r1, [ r0 ], #4
            
            ; Write patch address
            str r3, [ r0 ], #4
            
            ; Write patch value
            str r4, [ r0 ]
            
            sub r0, r0, #8
            ldr r1, [ r0 ]
            orr r1, r1, #1
            str r1, [ r0 ]
            
            ; Write 5, 9 to main control
            ldr r0, _patch_macro_control
            mov r1, #5
            strb r1, [ r0 ]
            mov r1, #9
            strb r1, [ r0 ]
        
            bx lr

            _patch_macro_control: .word $_patchMacroControl
            _patch_macro_base: .word $_patchMacroBase
        `,
        properties: {
            _patchMacroBase: {
                '*': 0x03802000,
            },
            _patchMacroControl: {
                'A*': 0x03802040,
                'B*': 0x03802080,
            },
        },
    },
};
