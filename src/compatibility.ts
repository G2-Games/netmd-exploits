import { Exploit } from './exploit';
import { ExploitStateManager } from './exploit-state';
import { CachedSectorAtracDownload, FirmwareDumper, ForceTOCEdit, Tetris } from './exploits';

import { USBCodeExecution } from './exploits/usb-code-execution';
import { isVersionMatchingFormat } from './utils';

type AbstractExploitConstructor = abstract new (statemanager: ExploitStateManager) => Exploit;

const CompatibilityTable: { [key: string]: (string | (AbstractExploitConstructor & { _name: string }))[] } = {
    [FirmwareDumper._name]: ['*'],
    [USBCodeExecution._name]: ['S1.600', 'S1.500', 'S1.400', 'S1.300', 'S1.100', 'S1.000'],
    [CachedSectorAtracDownload._name]: ['S1.600', 'S1.500','S1.400', 'S1.300', 'S1.100', 'S1.000', USBCodeExecution],
    [ForceTOCEdit._name]: ['S1.600', 'S1.500','S1.400', 'S1.300', 'S1.100', 'S1.000', USBCodeExecution],
    [Tetris._name]: ['S1.600', USBCodeExecution],
};

export function isCompatible<T extends Exploit>(
    exploit: (abstract new (statemanager: ExploitStateManager) => T) & { _name: string },
    version: string
) {
    let compatibles = CompatibilityTable[exploit._name];
    if (!compatibles)
        throw new Error(`Cannot check compatibility of ${exploit._name} as it hasn't been included in the compatibility table`);
    let dependencies = compatibles.filter((n) => (n as any)._name !== undefined);
    // All dependencies have to be compatible.
    if (!dependencies.every((n) => isCompatible(n as any, version))) {
        console.log(`Checking compatibility of ${exploit._name} with ${version} - Deps-incompatible!`);
        return false;
    }
    for (let compatibleVersion of CompatibilityTable[exploit._name]) {
        if (typeof compatibleVersion === 'string') {
            if (isVersionMatchingFormat(compatibleVersion, version)) {
                console.log(`Checking compatibility of ${exploit._name} with ${version} - Compatible!`);
                return true;
            }
        }
    }
    console.log(`Checking compatibility of ${exploit._name} with ${version} - Incompatible!`);
    return false;
}
